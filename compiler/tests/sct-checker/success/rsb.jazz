/* -------------------------------------------------------------------------- */
/* Utils. */

#[test=nosct]
inline
fn leak_u64(reg u64 x) {
    if (x == 0) { [x] = 0; }
}

#[test=nosct]
fn do_nothing() {}

#[test=nosct]
inline
fn inline_do_nothing() {}

#[test=nosct]
fn call_do_nothing() {
    do_nothing();
}

#[test=nosct]
inline
fn inline_call_do_nothing() {
    do_nothing();
}

#[test=nosct]
fn id_msf(reg u64 x) -> #msf reg u64 {
    return x;
}

#[test=nosct]
fn return_msf() -> #msf reg u64 {
    reg u64 msf;
    msf = #init_msf();
    return msf;
}

#[test=nosct]
fn id(reg u64 x) -> reg u64 {
    return x;
}

// Leaving this unannotated forces the checker to decide that the result must
// be public (i.e. to compute [out_guaranteed_public] after optimization).
#[test=nosct]
fn return_public_register() -> reg u64 {
    reg u64 x;
    x = 0;
    return x;
}

#[test=nosct]
fn return_public_mmx() -> #mmx reg u64 {
    reg u64 r;
    r = 0;
    #mmx reg u64 x;
    x = #MOVX(r);
    return x;
}

#[test=nosct]
inline
fn return_public_stack() -> stack u64 {
    stack u64 s;
    s = 0;
    return s;
}

#test=nosct
#sct="{ ptr: public, val: t } -> { ptr: public, val: t }"
fn return_public_ptr(reg ptr u64[1] p) -> reg ptr u64[1] {
    return p;
}

#test=nosct
#sct="{ ptr: public, val: t } -> { ptr: public, val: t }"
fn return_public_public_ptr(reg ptr u64[1] p) -> reg ptr u64[1] {
    return p;
}


/* -------------------------------------------------------------------------- */

fn transient_after_call(#public reg u64 x) -> #transient reg u64 {
    do_nothing();
    return x;
}

fn transient_after_call_noupdate(#transient reg u64 x) -> #transient reg u64 {
    reg u64 msf;
    msf = #init_msf();
    msf = id_msf(msf);
    return x;
}

fn transient_after_call_update(#transient reg u64 x) -> #transient reg u64 {
    reg u64 msf;
    msf = #init_msf();
    #update_after_call
    msf = id_msf(msf);
    return x;
}

fn protect_after_call(#public reg u64 x, #msf reg u64 msf) -> #public reg u64 {
    #update_after_call
    msf = id_msf(msf);
    x = #protect(x, msf);
    return x;
}

fn inline_ignored(#public reg u64 x) -> #public reg u64 {
    #inline
    do_nothing();
    return x;
}

fn inline_ignored2(#public reg u64 x) -> #public reg u64 {
    inline_do_nothing();
    return x;
}

fn call_in_if(#transient reg u64 x) -> #public reg u64 {
    reg u64 msf;
    msf = #init_msf();

    if (x < 5) {
        msf = #update_msf(x < 5, msf);
        #update_after_call
        msf = id_msf(msf);
    } else {
        msf = #update_msf(!(x < 5), msf);
    }

    x = #protect(x, msf);
    return x;
}

fn call_in_while(#transient reg u64 x) -> #public reg u64 {
    reg u64 msf;
    msf = #init_msf();
    x = #protect(x, msf);

    while (x < 5) {
        msf = #update_msf(x < 5, msf);
        #update_after_call
        msf = id_msf(msf);
        x = #protect(x, msf);
    }

    return x;
}

fn write_mmx_public(#public reg u64 x) -> #mmx reg u64 {
    #mmx reg u64 m;
    m = x;
    return m;
}

fn write_mmx_protected(#transient reg u64 x, #msf reg u64 msf) -> #mmx reg u64 {
    #mmx reg u64 m;
    x = #protect(x, msf);
    m = x;
    return m;
}

fn public_return_is_public() {
    reg u64 x;

    stack u64[1] a;
    a[0] = 0;

    reg ptr u64[1] p;
    p = a;
    p = return_public_ptr(p);
    x = p[0];

    x = return_public_register();
    leak_u64(x);

    #mmx reg u64 m;
    m = return_public_mmx();
    x = m;
    leak_u64(x);

    stack u64 s;
    s = return_public_stack();
    x = s;
    leak_u64(x);
}

fn call_initializes_msf() -> #msf reg u64 {
    reg u64 msf;
    #update_after_call
    msf = return_msf();
    return msf;
}

/*
  TODO_RSB: The checker should realize that i can't be transient.

fn call_in_for(#transient reg u64 x) -> #public reg u64 {
    reg u64 msf;
    msf = #init_msf();
    x = #protect(x, msf);

    inline int i;
    i = 1;
    for i = 0 to i {
        #update_after_call
        msf = id_msf(msf);
        x = #protect(x, msf);
        [x + i] = 0;
    }

    return x;
}
*/

#test=nosct
#sct="{ptr: public, val: secret} -> {ptr: public, val: secret}"
fn f(reg ptr u32[1] x) -> reg ptr u32[1] {
    return x;
}

// The checker needs to realize that the x does not become transient.
fn public_slice(reg ptr u32[1] x) -> reg ptr u32[1] {
    inline int i;
    x[0:1] = f(x[0:1]);
    x[0] = 1;
    return x;
}

fn spill_mmx() {
    #spill_to_mmx reg u64 x = 0;
    () = #spill(x);
    do_nothing();
    () = #unspill(x);
    leak_u64(x);
}

#sct="{ptr: public, val: secret} -> {ptr: public, val: secret}"
fn spill_ptr_mmx(#spill_to_mmx reg ptr u64[1] x) -> reg ptr u64[1] {
    () = #spill(x);
    do_nothing();
    () = #unspill(x);
    x[0] = 0;
    return x;
}
