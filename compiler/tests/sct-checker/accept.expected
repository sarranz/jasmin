File annot.jazz:
modmsf f : #transient ->
#secret
output corruption: #public
 constraints:


modmsf id : #poly = { n = k, s = k} ->
#poly = { n = k, s = k}
output corruption: #public
 constraints:
k <= k, 

nomodmsf id1 : #poly = { n = k, s = k} ->
#poly = { n = k, s = k}
output corruption: #public
 constraints:


nomodmsf id2 : #[ptr = { n = p, s = p}, val = { n = v, s = v}] ->
#[ptr = { n = p, s = p}, val = { n = v, s = v}]
output corruption: #public
 constraints:


nomodmsf id3 : #public ->
#public
output corruption: #public
 constraints:


nomodmsf id4 : #transient ->
#transient
output corruption: #public
 constraints:


nomodmsf id5 : #secret ->
#secret
output corruption: #public
 constraints:


nomodmsf unused_msf : #msf ->

output corruption: #public
 constraints:


File arrays.jazz:
modmsf transient_read : #[ptr = transient, val = { n = d, s = secret}] *
                        #transient ->
#poly = { n = d, s = secret}
output corruption: #public
 constraints:


modmsf safe_access_no_array : #public * #poly = { n = d, s = d} ->
#poly = { n = d, s = d}
output corruption: #public
 constraints:


modmsf safe_access : #public * #secret ->
#secret
output corruption: #public
 constraints:


modmsf safe_direct_access : #public * #secret ->
#secret
output corruption: #public
 constraints:


File basic.jazz:
modmsf nothing : #transient ->
#public
output corruption: #public
 constraints:


nomodmsf secret : #secret ->
#secret
output corruption: #public
 constraints:


modmsf branch : #transient * #secret * #secret ->
#secret
output corruption: #public
 constraints:


nomodmsf branchless : #transient * #secret * #secret ->
#secret
output corruption: #public
 constraints:


modmsf forloop : #transient ->
#public
output corruption: #public
 constraints:


modmsf whileloop : #transient ->
#public
output corruption: #public
 constraints:


modmsf archetype : #transient ->
#transient
output corruption: #public
 constraints:


modmsf load : #transient * #transient ->
#public
output corruption: #public
 constraints:


modmsf store : #transient * #transient * #transient * #secret ->

output corruption: #transient
 constraints:


nomodmsf xof_init : #public * #[ptr = public, val = transient] *
                    #[ptr = public, val = secret] ->
#[ptr = public, val = secret]
output corruption: #transient
 constraints:


File bug_852.jazz:
nomodmsf reset : #public ->

output corruption: #public
 constraints:


modmsf main : #transient ->

output corruption: #public
 constraints:


File bug_887.jazz:
modmsf test_msf : #secret * #transient ->

output corruption: #public
 constraints:


modmsf test_venv : #secret ->
#public
output corruption: #public
 constraints:


File conditional-expr.jazz:
nomodmsf leak_cond : #secret * #[ptr = public, val = public] *
                     #[ptr = public, val = public] ->
#[ptr = secret, val = secret]
output corruption: #public
 constraints:


File corruption.jazz:
nomodmsf corrupts_memory : #public * #secret *
                           #[ptr = public, val = secret] *
                           #[ptr = public, val = public] ->
#[ptr = public, val = secret] * #[ptr = public, val = transient]
output corruption: #transient
 constraints:


nomodmsf does_not_corrupt_memory : #secret * #[ptr = public, val = secret] *
                                   #[ptr = public, val = public] ->
#[ptr = public, val = secret] * #[ptr = public, val = public]
output corruption: #public
 constraints:


modmsf does_corrupt_memory : #secret * #[ptr = public, val = secret] *
                             #[ptr = public, val = public] ->
#[ptr = public, val = secret] * #[ptr = public, val = transient]
output corruption: #transient
 constraints:


nomodmsf does_not_corrupt_registers : #public * #secret *
                                      #[ptr = public, val = secret] ->
#[ptr = public, val = secret] * #public
output corruption: #transient
 constraints:


File for_loop.jazz:
modmsf for_inference_bug1 : #msf ->
#msf
output corruption: #public
 constraints:


modmsf for_inference_bug2 : #transient ->
#public
output corruption: #public
 constraints:


File mmx.jazz:
nomodmsf spill_msf : #msf ->
#msf
output corruption: #public
 constraints:


nomodmsf return_msf : #msf ->
#msf
output corruption: #public
 constraints:


nomodmsf take_msf : #msf ->
#msf
output corruption: #public
 constraints:


modmsf init_mmx_msf :  ->
#public
output corruption: #public
 constraints:


nomodmsf protect_mmx : #transient * #msf ->
#public
output corruption: #public
 constraints:


File movmsf.jazz:
modmsf reset_msf :  ->
#msf
output corruption: #public
 constraints:


modmsf main : #transient ->

output corruption: #public
 constraints:


File paper.jazz:
modmsf fig3a : #[ptr = transient, val = transient] *
               #[ptr = transient, val = secret] * #transient ->
#[ptr = public, val = secret]
output corruption: #public
 constraints:


modmsf fig3b : #[ptr = transient, val = transient] *
               #[ptr = transient, val = { n = w, s = secret}] *
               #[ptr = transient, val = secret] * #transient * #secret ->
#[ptr = public, val = { n = w, s = secret}] * #[ptr = public, val = secret]
output corruption: #transient
 constraints:


modmsf fig4a : #[ptr = public, val = secret] * #[ptr = public, val = secret] ->
#[ptr = public, val = secret]
output corruption: #transient
 constraints:


modmsf fig4b : #[ptr = transient, val = secret] *
               #[ptr = transient, val = secret] ->
#[ptr = public, val = secret]
output corruption: #transient
 constraints:


modmsf fig4c : #[ptr = transient, val = secret] *
               #[ptr = transient, val = secret] ->
#[ptr = public, val = secret]
output corruption: #transient
 constraints:


modmsf fig5a : #[ptr = public, val = { n = d, s = secret}] ->
#poly = { n = d, s = secret}
output corruption: #public
 constraints:


modmsf fig5b : #[ptr = transient, val = { n = d, s = d}] ->
#poly = { n = d, s = d}
output corruption: #public
 constraints:
d <= d, 

modmsf fig5c : #[ptr = transient, val = { n = d, s = d}] ->
#poly = { n = d, s = d}
output corruption: #public
 constraints:
d <= d, 

modmsf fig6a : #[ptr = transient, val = secret] *
               #[ptr = transient, val = transient] * #transient * #transient ->
#public * #[ptr = public, val = secret]
output corruption: #public
 constraints:


modmsf fig6b : #[ptr = transient, val = secret] *
               #[ptr = transient, val = transient] * #transient * #secret ->
#public * #[ptr = public, val = secret]
output corruption: #public
 constraints:


File rsb.jazz:
modmsf leak_u64 : #public ->

output corruption: #public
 constraints:


nomodmsf do_nothing :  ->

output corruption: #public
 constraints:


nomodmsf inline_do_nothing :  ->

output corruption: #public
 constraints:


modmsf call_do_nothing :  ->

output corruption: #public
 constraints:


modmsf inline_call_do_nothing :  ->

output corruption: #public
 constraints:


nomodmsf id_msf : #msf ->
#msf
output corruption: #public
 constraints:


modmsf return_msf :  ->
#msf
output corruption: #public
 constraints:


nomodmsf id : #poly = { n = ?911, s = ?910} ->
#poly = { n = ?911, s = ?910}
output corruption: #public
 constraints:


nomodmsf return_public_register :  ->
#public
output corruption: #public
 constraints:


nomodmsf return_public_mmx :  ->
#public
output corruption: #public
 constraints:


nomodmsf return_public_stack :  ->
#public
output corruption: #public
 constraints:


nomodmsf return_public_ptr : #[ptr = public, val = { n = t, s = t}] ->
#[ptr = public, val = { n = t, s = t}]
output corruption: #public
 constraints:


nomodmsf return_public_mmx_ptr : #[ptr = public, val = { n = t, s = t}] ->
#[ptr = public, val = { n = t, s = t}]
output corruption: #public
 constraints:


modmsf transient_after_call : #public ->
#transient
output corruption: #public
 constraints:


modmsf transient_after_call_noupdate : #transient ->
#transient
output corruption: #public
 constraints:


modmsf transient_after_call_update : #transient ->
#transient
output corruption: #public
 constraints:


modmsf protect_after_call : #public * #msf ->
#public
output corruption: #public
 constraints:


nomodmsf inline_ignored : #public ->
#public
output corruption: #public
 constraints:


nomodmsf inline_ignored2 : #public ->
#public
output corruption: #public
 constraints:


modmsf call_in_if : #transient ->
#public
output corruption: #public
 constraints:


modmsf call_in_while : #transient ->
#public
output corruption: #public
 constraints:


nomodmsf write_mmx_public : #public ->
#public
output corruption: #public
 constraints:


nomodmsf write_mmx_protected : #transient * #msf ->
#public
output corruption: #public
 constraints:


modmsf public_return_is_public :  ->

output corruption: #public
 constraints:


modmsf call_initializes_msf :  ->
#msf
output corruption: #public
 constraints:


modmsf call_in_for : #transient ->
#public
output corruption: #public
 constraints:


nomodmsf f : #[ptr = public, val = secret] ->
#[ptr = public, val = secret]
output corruption: #public
 constraints:


modmsf public_slice : #[ptr = public, val = secret] ->
#[ptr = public, val = secret]
output corruption: #public
 constraints:


modmsf spill_mmx :  ->

output corruption: #public
 constraints:


modmsf spill_ptr_mmx : #[ptr = public, val = secret] ->
#[ptr = public, val = secret]
output corruption: #public
 constraints:


File spill.jazz:
nomodmsf spill1 : #public * #secret ->
#public
output corruption: #transient
 constraints:


modmsf spill2 : #public * #secret ->
#public
output corruption: #transient
 constraints:


File while.jazz:
modmsf while_first_branch : #public * #secret ->
#public
output corruption: #public
 constraints:


